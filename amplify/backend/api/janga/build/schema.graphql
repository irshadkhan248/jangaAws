type Todo {
  email: String!
  username: String!
  accessToken: String!
  idToken: String!
  refreshToken: String!
  owner: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTodoConnection {
  items: [Todo]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelTodoFilterInput {
  email: ModelStringInput
  username: ModelStringInput
  accessToken: ModelStringInput
  idToken: ModelStringInput
  refreshToken: ModelStringInput
  and: [ModelTodoFilterInput]
  or: [ModelTodoFilterInput]
  not: ModelTodoFilterInput
}

type Query {
  getTodo(id: ID!): Todo
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
  searchTodos(filter: SearchableTodoFilterInput, sort: SearchableTodoSortInput, limit: Int, nextToken: String): SearchableTodoConnection
}

input CreateTodoInput {
  email: String!
  username: String!
  accessToken: String!
  idToken: String!
  refreshToken: String!
}

input UpdateTodoInput {
  email: String
  username: String
  accessToken: String
  idToken: String
  refreshToken: String
}

input DeleteTodoInput {
  id: ID
}

type Mutation {
  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo
  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo
  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo
}

input ModelTodoConditionInput {
  email: ModelStringInput
  username: ModelStringInput
  accessToken: ModelStringInput
  idToken: ModelStringInput
  refreshToken: ModelStringInput
  and: [ModelTodoConditionInput]
  or: [ModelTodoConditionInput]
  not: ModelTodoConditionInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Subscription {
  onCreateTodo(owner: String!): Todo @aws_subscribe(mutations: ["createTodo"])
  onUpdateTodo(owner: String!): Todo @aws_subscribe(mutations: ["updateTodo"])
  onDeleteTodo(owner: String!): Todo @aws_subscribe(mutations: ["deleteTodo"])
}

input SearchableStringFilterInput {
  ne: String
  gt: String
  lt: String
  gte: String
  lte: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
}

input SearchableIDFilterInput {
  ne: ID
  gt: ID
  lt: ID
  gte: ID
  lte: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableTodoFilterInput {
  email: SearchableStringFilterInput
  username: SearchableStringFilterInput
  accessToken: SearchableStringFilterInput
  idToken: SearchableStringFilterInput
  refreshToken: SearchableStringFilterInput
  and: [SearchableTodoFilterInput]
  or: [SearchableTodoFilterInput]
  not: SearchableTodoFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableTodoSortableFields {
  email
  username
  accessToken
  idToken
  refreshToken
}

input SearchableTodoSortInput {
  field: SearchableTodoSortableFields
  direction: SearchableSortDirection
}

type SearchableTodoConnection {
  items: [Todo]
  nextToken: String
  total: Int
}
